WITH base_traces AS (
  SELECT
    -- block_timestamp,
    tx_hash,
    from_address,
    to_address,
    -- input,
    value,
    LEFT(input, 10) AS funct_signature,
    regexp_substr_all(SUBSTR(input, 11), '.{64}') AS segmented,
    trace_address,
    type
  FROM monad.testnet.fact_traces
  WHERE block_timestamp >= '2025-04-20'
    AND tx_succeeded = 'TRUE'
    AND (
      (to_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6'
       AND LEFT(input, 10) IN ('0xf19d6546', '0x526cc7a7', '0x02a57915', '0xf9565530'))
      OR
      (to_address = '0x3bb9afb94c82752e47706a10779ea525cf95dc27'
       AND LEFT(input, 10) IN ('0xa9059cbb'))
      OR
      (from_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6'
       AND LEFT(input, 10) IN ('0xa9059cbb'))
      OR
      (to_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6' AND LEFT(input, 10) IN ('0x34d8f707', '0xe548cedd', '0x8ffc3453'))  -- sell txs
    )
    AND trace_address IN ('ORIGIN', '6', '7')
),

token_logs AS (
    SELECT
        -- block_timestamp,
        tx_hash,
        contract_address,
        -- origin_from_address,
        data,
        topic_0,
        -- topic_1,
        -- topic_2,
        event_index
    FROM monad.testnet.fact_event_logs
    WHERE block_timestamp >= '2025-04-20'
      AND tx_succeeded = 'TRUE'
),

non_bonded_txs AS (
    SELECT
        tx_hash,
        -- from_address AS user,
        value,
        segmented,
        funct_signature
    FROM base_traces
    WHERE to_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6'
      AND trace_address = 'ORIGIN'
),

non_bonded_buy_raw AS (
    SELECT
        tx_hash,
        -- user AS real_user,
        value,
        CASE
          WHEN funct_signature = '0xf19d6546' THEN '0x' || SUBSTR(segmented[3], 25)
          WHEN funct_signature = '0x526cc7a7' THEN '0x' || SUBSTR(segmented[2], 25)
          ELSE NULL
        END AS token_involved,
        -- funct_signature
    FROM non_bonded_txs
    WHERE funct_signature = '0xf19d6546' OR funct_signature = '0x526cc7a7'
),

non_bonded_buy AS (
    SELECT
        t.tx_hash,
        -- t.real_user,
        -- 'Buy' AS event,
        -- value AS amount_in,
        -- value/1.01 AS amount_invest,
        value-(value/1.01) AS fee_earned,
        -- t.token_involved AS token,
        -- m.data
    FROM token_logs m
    JOIN non_bonded_buy_raw t 
      ON m.contract_address = t.token_involved AND t.tx_hash = m.tx_hash
    QUALIFY ROW_NUMBER() OVER(PARTITION BY t.tx_hash ORDER BY event_index DESC) = 1
),

-- non_bonded_buy AS (
--     SELECT
--         tx_hash,
--         real_user,
--         event,
--         -- amount_in,
--         amount_invest,
--         value-(value/1.01) AS fee_earned,
--         -- token,
--         -- livequery.utils.udf_hex_to_int(data) / '1e18' AS amount_out
--     FROM non_bonded_buy_joined
-- ),

non_bonded_buy_refund_raw AS (
    SELECT
        tx_hash,
        segmented,
        '0x' || SUBSTR(segmented[2], 25) AS token_involved,
        -- funct_signature,
        trace_address
    FROM base_traces
    WHERE ((to_address = '0x3bb9afb94c82752e47706a10779ea525cf95dc27' AND funct_signature = '0xa9059cbb') OR (to_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6' AND funct_signature = '0xf9565530'))
      AND type = 'CALL' 
      AND trace_address IN ('6', 'ORIGIN')
),

non_bonded_buy_refund_cleaned AS (
    SELECT
        t.tx_hash,
        COALESCE(t.token_involved, o.token_involved) AS token,
        t.segmented
    FROM non_bonded_buy_refund_raw t
    LEFT JOIN non_bonded_buy_refund_raw o
      ON t.tx_hash = o.tx_hash AND o.trace_address = 'ORIGIN'
    WHERE t.trace_address != 'ORIGIN'
),

non_bonded_buy_refund_joined AS (
    SELECT
        t.tx_hash,
        -- origin_from_address AS real_user,
        -- 'Buy' AS event,
        t.token,
        t.segmented,
        -- data
    FROM token_logs m
    JOIN non_bonded_buy_refund_cleaned t 
      ON m.contract_address = t.token AND t.tx_hash = m.tx_hash
    QUALIFY ROW_NUMBER() OVER(PARTITION BY t.tx_hash ORDER BY event_index DESC) = 1
),

non_bonded_buy_refund AS (
    SELECT
        tx_hash,
        -- real_user,
        -- 'Buy' AS event,
        -- livequery.utils.udf_hex_to_int(segmented[1]) / '1e18' AS amount_invest,
        (livequery.utils.udf_hex_to_int(segmented[1]) / '1e18') * 0.01 AS fee_earned,
        -- token,
        -- livequery.utils.udf_hex_to_int(data) / '1e18' AS amount_out
    FROM non_bonded_buy_refund_joined
),

non_bonded_buy_create_raw AS (
    SELECT
        tx_hash,
        to_address,
        -- from_address AS user,
        value - 0.02 AS value_adjusted,
        -- segmented,
        -- LEFT(input, 10) AS funct_signature,
        -- type,
        trace_address
    FROM base_traces
    WHERE ((to_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6' AND funct_signature = '0x02a57915') OR (from_address = '0x822eb1add41cf87c3f178100596cf24c9a6442f6' AND funct_signature = '0xa9059cbb'))
      AND type = 'CALL' 
      AND trace_address IN ('ORIGIN', '7')
),

non_bonded_buy_create_cleaned AS (
    SELECT
        t.tx_hash,
        -- t.user AS real_user,
        -- 'Buy' AS event,
        -- t.value_adjusted AS amount_in,
        -- t.value_adjusted/1.01 AS amount_invest,
        t.value_adjusted-(t.value_adjusted/1.01) AS fee_earned,
        o.to_address AS token,
        -- t.funct_signature,
        -- t.type,
        -- t.trace_address
    FROM non_bonded_buy_create_raw t
    LEFT JOIN non_bonded_buy_create_raw o
      ON t.tx_hash = o.tx_hash AND o.trace_address = '7'
    WHERE t.trace_address != '7'
),

non_bonded_buy_create AS (
    SELECT
        t.tx_hash,
        -- real_user,
        -- event,
        -- amount_in,
        -- amount_invest,
        fee_earned,
        -- token,
        -- data
    FROM token_logs m
    JOIN non_bonded_buy_create_cleaned t 
      ON m.contract_address = t.token AND t.tx_hash = m.tx_hash
    QUALIFY ROW_NUMBER() OVER(PARTITION BY t.tx_hash ORDER BY event_index DESC) = 1
),

-- non_bonded_buy_create AS (
--     SELECT
--         tx_hash,
--         real_user,
--         event,
--         amount_invest,
--         token,
--         -- livequery.utils.udf_hex_to_int(data) / '1e18' AS amount_out
--     FROM non_bonded_buy_create_joined
-- ),

non_bonded_buy_final AS (
  SELECT * FROM non_bonded_buy

    UNION ALL

  SELECT * FROM non_bonded_buy_refund

    UNION ALL

  SELECT * FROM non_bonded_buy_create
),

non_bonded_sell_raw AS (
    SELECT
        tx_hash,
        -- user AS real_user,
        -- livequery.utils.udf_hex_to_int(segmented[0]) / '1e18' AS amount_in,
        -- CASE
        --   WHEN funct_signature = '0x34d8f707' OR funct_signature = '0xe548cedd' THEN '0x' || SUBSTR(segmented[1], 25)
        --   WHEN funct_signature = '0x8ffc3453' THEN '0x' || SUBSTR(segmented[2], 25)
        --   ELSE NULL
        -- END AS token_sold,
        LOWER('0x3bb9AFB94c82752E47706A10779EA525Cf95dc27') AS token_gotten,
        -- funct_signature
    FROM non_bonded_txs
    WHERE funct_signature = '0x34d8f707' OR funct_signature = '0xe548cedd' OR funct_signature = '0x8ffc3453'
),

non_bonded_sell_joined AS (
    SELECT
        t.tx_hash,
        -- t.real_user,
        -- 'Sell' AS event,
        -- amount_in,
        -- token_sold,
        data
    FROM non_bonded_sell_raw t
    JOIN token_logs m
      ON t.tx_hash = m.tx_hash AND t.token_gotten = m.contract_address
    QUALIFY ROW_NUMBER() OVER(PARTITION BY m.tx_hash ORDER BY event_index DESC) = 1
),

non_bonded_sell_cleaned AS (
    SELECT
        tx_hash,
        -- real_user,
        -- 'Sell' AS event,
        -- amount_in,
        -- token_sold AS token,
        livequery.utils.udf_hex_to_int(data) / '1e18' AS amount_received,
        amount_received/0.99 AS amount_out
    FROM non_bonded_sell_joined
),
  
non_bonded_sell_final AS (
    SELECT
        tx_hash,
        -- real_user,
        -- 'Sell' AS event,
        -- amount_in,
        -- token_sold AS token,
        amount_out*0.01 AS fee_earned
    FROM non_bonded_sell_cleaned
),

non_bonded_final AS (
  SELECT * FROM non_bonded_buy_final

    UNION ALL

  SELECT * FROM non_bonded_sell_final
),

pool_created AS (
  SELECT
    -- block_timestamp,
    tx_hash,
    1 AS fee_earned
  FROM monad.testnet.fact_event_logs
  WHERE contract_address = '0x13ed0d5e1567684d964469ccba8a977cda580827'
    AND topic_0 = '0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9'
    AND block_timestamp >= '2025-02-19'
),

fee_table AS (
  SELECT * FROM non_bonded_final
  UNION
  SELECT * FROM pool_created
)

SELECT
  SUM(fee_earned) AS total_earned_fees,
  COUNT(DISTINCT tx_hash) AS total_txs,
  AVG(fee_earned) AS avg_fee_per_tx
FROM fee_table
WHERE fee_earned IS NOT NULL
